{
  "contract_name": "xion-capypolls-core",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "initial_fee",
      "poll_code_id",
      "protocol_fee",
      "token_code_id"
    ],
    "properties": {
      "initial_fee": {
        "$ref": "#/definitions/Uint128"
      },
      "poll_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "protocol_fee": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "token_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_poll"
        ],
        "properties": {
          "create_poll": {
            "type": "object",
            "required": [
              "avatar",
              "description",
              "duration",
              "no_token_name",
              "no_token_symbol",
              "question",
              "yes_token_name",
              "yes_token_symbol"
            ],
            "properties": {
              "avatar": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "no_token_name": {
                "type": "string"
              },
              "no_token_symbol": {
                "type": "string"
              },
              "question": {
                "type": "string"
              },
              "yes_token_name": {
                "type": "string"
              },
              "yes_token_symbol": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_poll_code_id"
        ],
        "properties": {
          "update_poll_code_id": {
            "type": "object",
            "required": [
              "code_id"
            ],
            "properties": {
              "code_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_token_code_id"
        ],
        "properties": {
          "update_token_code_id": {
            "type": "object",
            "required": [
              "code_id"
            ],
            "properties": {
              "code_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_initial_fee"
        ],
        "properties": {
          "set_initial_fee": {
            "type": "object",
            "required": [
              "new_fee"
            ],
            "properties": {
              "new_fee": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_protocol_fee"
        ],
        "properties": {
          "set_protocol_fee": {
            "type": "object",
            "required": [
              "new_fee"
            ],
            "properties": {
              "new_fee": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_fees"
        ],
        "properties": {
          "withdraw_fees": {
            "type": "object",
            "required": [
              "to"
            ],
            "properties": {
              "to": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_poll_count"
        ],
        "properties": {
          "get_poll_count": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_poll_at"
        ],
        "properties": {
          "get_poll_at": {
            "type": "object",
            "required": [
              "index"
            ],
            "properties": {
              "index": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "is_poll_from_factory"
        ],
        "properties": {
          "is_poll_from_factory": {
            "type": "object",
            "required": [
              "poll_address"
            ],
            "properties": {
              "poll_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_poll_details"
        ],
        "properties": {
          "get_poll_details": {
            "type": "object",
            "required": [
              "poll_address"
            ],
            "properties": {
              "poll_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "denom",
        "initial_fee",
        "owner",
        "poll_code_id",
        "protocol_fee",
        "token_code_id"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "initial_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "owner": {
          "type": "string"
        },
        "poll_code_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "protocol_fee": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token_code_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_poll_at": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PollResponse",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "get_poll_count": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PollCountResponse",
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "get_poll_details": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PollDetailsResponse",
      "type": "object",
      "required": [
        "exists"
      ],
      "properties": {
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "exists": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "is_poll_from_factory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    }
  }
}
